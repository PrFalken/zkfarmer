#!/usr/bin/env python
#
# This file is part of the zkfarmer package.
# (c) Olivier Poitrey <rs@dailymotion.com>
#
# For the full copyright and license information, please view the LICENSE
# file that was distributed with this source code.

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)) + '/..')

from zkfarmer.conf import Conf
from zkfarmer import ZkFarmer
import zookeeper
import logging


def main():
    from zktools.connection import ZkConnection
    from optparse import OptionParser
    from signal import signal, SIGTERM, SIGINT

    parser = OptionParser(usage='usage: %prog [options] <join|export> /path/to/root/zknode /path/to/conf',
                          description='Register the current host as a node of a service defined by a zookeeper node path on ' +
                                      'one side and export the farm node list into a configuration file on the other side. ' +
                                      'Additionnaly, each node can carry its own configuration.')
    parser.add_option('-H', '--host', dest='host', default=os.environ.get('ZKHOST', 'localhost:2181'),
                      help='list of zookeeper hosts:port sperated by commas')
    parser.add_option('-f', '--format', dest='format', type='choice', choices=['json', 'php', 'dir'],
                      help='set the configuration format (supported formats: json, php, dir)')
    parser.add_option('-q', '--quiet', dest='quiet', action='store_true')
    parser.add_option('-v', '--verbose', dest='verbose', action='store_true')

    (options, args) = parser.parse_args()

    if len(args) is not 3:
        parser.error('Missing argument')

    COMMAND = args[0]
    ROOT_NODE_PATH = args[1]
    CONF_PATH = args[2]

    if ROOT_NODE_PATH[0] is not "/":
        parser.error('First argument must be the full path to the zookeeper node to create (eg: /services/db)')

    if options.verbose:
        level = logging.DEBUG
        zookeeper.set_debug_level(zookeeper.LOG_LEVEL_DEBUG)
    elif options.quiet:
        level = logging.WARN
        zookeeper.set_debug_level(zookeeper.LOG_LEVEL_WARN)
    else:
        level = logging.INFO
        zookeeper.set_debug_level(zookeeper.LOG_LEVEL_INFO)

    logging.basicConfig(level=level, format='%(asctime)s %(levelname)s %(message)s')

    try:
        conf = Conf(CONF_PATH, options.format)
    except ValueError, e:
        parser.error(e)
        exit(1)

    zkconn = ZkConnection(host=options.host)

    def sighandler(sig, frame):
        zkconn.close()
        exit()

    signal(SIGTERM, sighandler)
    signal(SIGINT, sighandler)

    farmer = ZkFarmer(zkconn)

    if COMMAND == 'export':
        farmer.export(conf, ROOT_NODE_PATH)
    elif COMMAND == 'join':
        farmer.join(conf, ROOT_NODE_PATH)
    else:
        parser.error('Invalid command: %s' % COMMAND)


if __name__ == "__main__":
    main()
